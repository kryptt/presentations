#+TITLE: Constructive Programming - Two - Lenses
#+INCLUDE: "./common.org"

* Introduction:
  ???
* Correct by Construction
** Referential Transparency:
   ???
** Total Functions:
   ???
** Termination:
   ???

* Optics
** Lenses

   #+BEGIN_SRC scala
     //What could go wrong here?!/
     type Gender = Boolean
     type BirthDate = LocalDate

     case class Person(name: String, birthDate: BirthDate, gender: Gender)
     case class Man(name: String, birthDate: BirthDate)

     val personToMan: Person => Option[Man] = _ match {
       case Person(name, birthDate, True) => Some(Man(name, birthDate))
       case p => None

     }

     val manToPerson: Man => Person = m => Person(m.name, m.birthDate, True)

     val getTime: IO[LocalDate] = ???

     val personAge: Person => IO[Int] = p => getTime.map(p.birthDate.yearsBetween)

     val manAge_1: Man => Option[IO[Int]] = ???
     val manAge_2: Man => IO[Int] = ???

     case class Lens[S, A](get: S => A, set: A => S => S) {
       def modify(A => A): S => S = ???

       def compose[T](other: Lens[T, S]): Lens[T, A] = ???

       def choice[T](other: Lens[T, A]): Lens[S \/ T, A] = ???

       def split[T, B](other: Lens[T, B]): Lens[S /\ T, A /\ B] = ???

     }
   #+END_SRC

** Primsms
   ???
** Functors

   #+BEGIN_SRC scala
     //What could go wrong here?!/
     trait Functor[F[_]] {

       def map[A, B](fa: F[A])(f: A => B): F[B] = ???

     }
   #+END_SRC

** Twan van Laarhoven Lens
   #+BEGIN_SRC scala
     //What could go wrong here?!/
     case class Const[A, B](a: A) implicit def constFunctor[AA] = new
       Functor[Const[AA, ?]] {

       def map[A, B](fa: Const[AA, A])(f: A => B): Const[AA, B] = ???

     }

     type TVL[S, A] = (Const[A, S], A => S) implicit def tvlFunctor[A] = new
       Functor[TVL[?, A]] {

       def map[S, T](fa: TVL[S, A])(f: S => T): TVL[T, A] = ???

     } trait Lens[S, A] {
       def apply[F[_]: Functor](A => F[A]): S => F[S]
       def get(s: S): A = ???
       def set(a: A, s: S): S = ???
       def modify(A => B): Lens[S, B] = ???
       def compose[T](other: Lens[T, S]): Lens[T, A] = ???
       def choice[T](other: Lens[T, A]): Lens[S \/ T, A] = ???
       def split[T, B](other: Lens[T, B]): Lens[S /\ T, A /\ B] = ???
     }
   #+END_SRC

* Extras
** Sudoku
   #+BEGIN_SRC scala
     // Let's write a sudoku solver/

     type Digit = Int Refined Digit
     type Cell = Option[Digit]
     type Board = Array[Array[Cell]]
     def solver: Board => Array[Board] = ???
   #+END_SRC

   [[https://www.cs.tufts.edu/~nr/cs257/archive/richard-bird/sudoku.pdf]]

** Shapeless
* References
  - [[https://en.wikipedia.org/wiki/Predicate_functor_logic]]
  - [[https://en.wikipedia.org/wiki/Curry%27s_paradox]]
  - [[https://bartoszmilewski.com/2013/10/08/lenses-stores-and-yoneda/]]
  - [[https://bartoszmilewski.com/2015/07/13/from-lenses-to-yoneda-embedding/]]
  - [[https://github.com/SethTisue/lens-examples/blob/master/src/main/scala/VanLaarhovenLenses.scala]]
  - [[https://github.com/hablapps/LensAlgebra]]
  - [[https://github.com/hablapps/stateless]]
